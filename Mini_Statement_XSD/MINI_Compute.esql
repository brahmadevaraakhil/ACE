PATH com.sb.logging;
CREATE COMPUTE MODULE MINI_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
--		 CALL CopyMessageHeaders();
		CALL CopyEntireMessage();
		RETURN FALSE;
	END;
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		DECLARE msg CHARACTER InputRoot.XMLNSC.log.send.isomsg.field[23].value;
		DECLARE header, body1 CHARACTER;
		IF CONTAINS(msg , '~') THEN
			SET header = SUBSTRING(msg BEFORE '~');
			SET body1 = SUBSTRING(msg AFTER '~');
		END IF;
		DECLARE fieldData BLOB CAST(body1 AS BLOB CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		SET OutputRoot.BLOB.BLOB = fieldData;
		PROPAGATE TO TERMINAL 'out1';
--		SET OutputRoot.MQMD.CorrelId = InputRoot.MQMD.CorrelId;
		SET OutputRoot.MQRFH2.usr = Environment.MQRFH2.usr;
	 	SET OutputRoot.MQRFH2.mcd.Msd = 'none';
	 	DECLARE msgId CHARACTER InputRoot.MQMD.MsgId;
		DECLARE correlationId CHARACTER Environment.MQRFH2.usr.RouterHeader.msgId;
		DECLARE protoType CHARACTER Environment.MQRFH2.usr.RouterHeader.replyProtocol;
		CREATE LASTCHILD OF OutputRoot DOMAIN 'JSON';
		CREATE LASTCHILD OF OutputRoot.JSON NAME 'Data';
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'Header';
		SET OutputRoot.JSON.Data.Header = Environment.MQRFH2.usr.RouterHeader.Header;
		CREATE LASTCHILD OF OutputRoot.JSON.Data NAME 'Body'; 
		CREATE LASTCHILD OF OutputRoot.JSON.Data.Body NAME 'MiniStatementResponse';
		SET OutputRoot.JSON.Data.Body.MiniStatementResponse.direction = FIELDVALUE(InputRoot.XMLNSC.log.send.isomsg.(XMLNSC.Attribute)direction);
		CREATE LASTCHILD OF OutputRoot.JSON.Data.Body.MiniStatementResponse NAME 'MiniStatement';
		CREATE FIELD OutputRoot.JSON.Data.Body.MiniStatementResponse.MiniStatement IDENTITY(JSON.Array);

		SET OutputRoot.JSON.Data.Body.MiniStatementResponse.MiniStatement.Item[1].ISOMIT= InputRoot.XMLNSC.log.send.isomsg.field[1].value;
		SET OutputRoot.JSON.Data.Body.MiniStatementResponse.MiniStatement.Item[1].primaryAccountNumber= InputRoot.XMLNSC.log.send.isomsg.field[2].value;
		SET OutputRoot.JSON.Data.Body.MiniStatementResponse.MiniStatement.Item[1].processingCode= InputRoot.XMLNSC.log.send.isomsg.field[3].value;

		DECLARE ref REFERENCE TO OutputRoot.JSON.Data.Body.MiniStatementResponse.MiniStatement.Item[1];
		DECLARE inref REFERENCE TO InputRoot.XMLNSC.log.send.isomsg;

		SET ref.amountTransaction = inref.field[4].value;
		SET ref.dateAndTimeTransmission = inref.field[5].value;
		SET ref.systemTraceAuditNumber = inref.field[6].value;
		SET ref.dateAndTimeLocalTransaction = inref.field[7].value;
		SET ref.dateEffective = inref.field[8].value;
		SET ref.expirationDate = inref.field[9].value;
		SET ref.settlementDate = inref.field[10].value;
		SET ref.messageErrorIndicator = inref.field[11].value;
		SET ref.pointOfServiceDataCode = inref.field[12].value;
		SET ref.reasonCode = inref.field[13].value;
		SET ref.transactionFee = inref.field[14].value;
		SET ref.amountsOriginal = inref.field[15].value;
		SET ref.acquiringInstitutionIdentificationCode = inref.field[16].value;
		SET ref.forwardingInstitutionIdentificationCode = inref.field[17].value;
		SET ref.retrievalReferenceNumber = inref.field[18].value;
		SET ref.responseCode = inref.field[19].value;
		SET ref.cardAcceptorTerminalID = inref.field[20].value;
		SET ref.cardAcceptorIdentificationCode = inref.field[21].value;
		SET ref.cardAcceptorNameLocation = inref.field[22].value;

		CREATE FIELD ref.additionalDataPrivate IDENTITY(JSON.Array);
--		DECLARE msg CHARACTER InputRoot.XMLNSC.log.send.isomsg.field[23].value;
--		DECLARE header, body1 CHARACTER;
--		IF CONTAINS(msg , '~') THEN
--			SET header = SUBSTRING(msg BEFORE '~');
--			SET body1 = SUBSTRING(msg AFTER '~');
--		END IF;

--		CREATE LASTCHILD OF Environment DOMAIN ('DFDL') PARSE(body1 ENCODING InputRoot.Properties.Encoding CCSID InputRoot.Properties.CodedCharSetId TYPE '{}:FIELD48');
		DECLARE refr REFERENCE TO Environment.DFDL.FIELD48.body[>];
		DECLARE i INTEGER 1;
		WHILE LASTMOVE(refr) DO

			IF FIELDTYPE(Environment.DFDL.FIELD48.body.DATE_TIME) IS NOT NULL THEN
				SET ref.additionalDataPrivate.Item[i].DATE_TIME = refr.DATE_TIME;
			ELSE
				SET ref.additionalDataPrivate.Item[i].DATE_TIME = '';
			END IF;

			IF FIELDTYPE(Environment.DFDL.FIELD48.body.TRAN_TYPE) IS NOT NULL THEN
				SET ref.additionalDataPrivate.Item[i].TRAN_TYPE = refr.TRAN_TYPE; 
			ELSE
				SET ref.additionalDataPrivate.Item[i].TRAN_TYPE = '';
			END IF;

			IF FIELDTYPE(Environment.DFDL.FIELD48.body.SIGN) IS NOT NULL THEN
				SET ref.additionalDataPrivate.Item[i].SIGN = refr.SIGN;
			ELSE
				SET ref.additionalDataPrivate.Item[i].SIGN = '';
			END IF;

			IF FIELDTYPE(Environment.DFDL.FIELD48.body.TRAN_AMOUNT) IS NOT NULL THEN
				SET ref.additionalDataPrivate.Item[i].TRAN_AMOUNT = refr.TRAN_AMOUNT;
			ELSE
				SET ref.additionalDataPrivate.Item[i].TRAN_AMOUNT = '';
			END IF;

			IF FIELDTYPE(Environment.DFDL.FIELD48.body.CURR_CODE) IS NOT NULL THEN
				SET ref.additionalDataPrivate.Item[i].CURR_CODE = refr.CURR_CODE;
			ELSE
				SET ref.additionalDataPrivate.Item[i].CURR_CODE = '';  
			END IF;

			MOVE refr NEXTSIBLING;
			SET i=i+1;
		END WHILE;

		SET ref.verificationData= inref.field[24].value;
		SET ref.originalDataElements= inref.field[25].value;
		SET ref.transportData= inref.field[26].value;
		SET ref.receivingInstitutionIdentificationCode= inref.field[27].value;
		SET ref.accountIdentification1= inref.field[28].value;
		SET ref.posDataCode= inref.field[29].value; 

		CREATE FIELD ref.RESERVEDPRIVATEUSE IDENTITY(JSON.Object);
		DECLARE outref REFERENCE TO InputRoot.XMLNSC.log.send.isomsg.isomsg; 

		SET ref.RESERVEDPRIVATEUSE.SWITCHKEY = outref.field[1].value;
		SET ref.RESERVEDPRIVATEUSE.ROUTINGINFORMATION = outref.field[2].value;
		SET ref.RESERVEDPRIVATEUSE.AUTHORIZERDATESETTLEMENT = outref.field[3].value;
		SET ref.RESERVEDPRIVATEUSE.MSDN = outref.field[4].value;   
		DECLARE outputChar CHARACTER CAST(ASBITSTREAM(OutputRoot.JSON.Data) AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId ENCODING InputRoot.Properties.Encoding);
		CALL AUDIT_LOGGING( msgId, correlationId, '',protoType,'Info','Mini_Statement_XSD','T24resPropagation',outputChar,CURRENT_TIMESTAMP,CAST(InputRoot.Properties.CreationTime AS TIMESTAMP),'MINI.msgflow') IN Database.DSNFARU.SYSTEM; 
		PROPAGATE TO TERMINAL 'out' FINALIZE NONE;
	END;  
END MODULE;